IF SHELL IS ALREADY THERE , WHY PYTHON ??
	
	
THEN WHY PYTHON ???
	  
SHELL SCRIPT IS NOT ACTUALY PROGRAMMING  -->  IT IS MORE OF AUTOMATION OF SHELL TASKS / LINUX COMMANDS / LINUX BASED TASKS AUTOMATION	  

    -- IS a command-line interpreter and scripting language for Unix-like operating systems 
	-- NOT FOR WINDOWS - POWERSHELL
    -- used for running and automating command-line tasks.
    -- Ideal for automating system-level tasks, managing files, running system commands, and writing small utility scripts ...
	
======================================	  


PYTHON :
      -- IT IS PROGRAMMING LANGUAGE, A HIGH-LEVEL, GENERAL-PURPOSE PROGRAMMING LANGUAGE.
      -- CLEAN, READABLE SYNTAX. 
	  -- OOP
	  -- SUPPORTS  OBJECT-ORIENTED, IMPERATIVE, FUNCTIONAL, AND PROCEDURAL PROGRAMMING PARADIGMS.
	  -- USED FOR WEB DEVELOPMENT, DATA ANALYSIS, MACHINE LEARNING, AUTOMATION(DEVOPS) , SCIENTIFIC COMPUTING, AND MORE.
	  -- OUR SCOPLE IS LIMITED TO PYTHON SCRIPTING FOR DEVOPS ACTIVITIES 
	  -- OOP focuses on the concepts of classes, objects, inheritance, encapsulation, polymorphism, and abstraction.
	  
	 

PROGRAM        --> MULTIPLE LINES OF CODE / INSTRUCTIONS--> SOFTWARE --> TO CPU -- PROCESSOR 
               -- Collection of code 
			   -- It manipulates data 
			   -- To store data we use variables 
	 

==================

WHAT IS VARIABLE ?   
   - a storage unit / container to store data .
   - to store data we use variables 


 x = "madhu"
==================

WHAT IS DATATYPE ?
Data tyes -- diffrent types of DATA , kinds of values that can be stored and manipulated
               
			   
			   Text -- str 
			   Numeric - int, float, complex 
			   Boolean - Bool (Only T / F ) 			   
			   
			   Sequence of items -- list, range, tuple  ( to store multiple items of diff data types ) 
			   Mapping -- Dictionary 
			   set - set 


 X  = [ 10, 9.8 , "KIRAN" , true ] 
========================================================
	 
READING AND PRINTIN DATA in python  


python    --->  input , print


# Reading input from the user
name = input("Enter your name: ")

# Printing the data
print("Hello,", {name})

---------------------------------------------
shell script   --> read , echo 

#!/bin/bash

# Reading input from the user
read -p "Enter your name: " name

# Printing the data
echo "Hello, $name"


=============================================================

OPERATORS :


   sum =  a + b

  ARITHMETIC   --->  + , - , * , /, %
  
  ASSIGNMENT   --->   = , +=, -+ , *=
  
  a=5 
  a*=2  ---> a = a*2 
  
  7 <  5 
   
  COMPARISION  --->    < , > , <= , >= , == , !=  ( true / false ) 
                      -eq , -lt , -le , -gt, -ge
  
  LOGICAL      --->  T & T -- T 
  
  IDENTITY     --->    is (==) is not (!=) 
  
  MEMBERSHIP   --->   in , not in 
  
  BITWISE     --->  & | ! ^ 

==================================================
EXAMPLE : 
python:

num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))


sum = num1 + num2


print(f"The sum of {num1} and {num2} is: {sum}")

==========================
#!/bin/bash

echo "Enter 1st numner"
read num1

echo "Enter 2nd  numner"
read num2

sum=$((num1+num2))

echo "sum of the 2 no is : $sum"




====================================================================

int , float , string , boolean 

LIST VS TUPLE  VS SET VS DICTIONARY 

( to store multiple items of different data types )


x = [ 1, 3.4, "madhu" , 4+5i, true ]

x = ( 1, 3.4, "madhu" , 4+5i, true )

x = { 1, 3.4, "madhu" , 4+5i, true }

   mC_list = [1, 2, 3, 4, 5, 6 ,7,1]   ---> []   --> Ordered ,Mutable
   
   mC_tuple = (1, 2, 3, 4, 5,1 )  --->  ()     -->  Ordered ,Immutable No changable entries 
   
   mC_set = {1, 2, 3, 4, 5}    -->   {}     --> No duplicate entries 
   
   
 ------------------  
   
   my_dict = {  key --- value 
               "name": "Madhu", 
               "age": 30, 
			   "city": "Hyd"
			   "address"  "madhapur"
			   }
   
 ======
ORDERED: 
     POSTIONS OF DATA ARE FIXED  (LIST , TUPLE ) , Elements maintain their order; can be accessed via  Index.

Mutable:   Elements can be changed, added, or removed.

Duplicates: Allows duplicate elements.

 ================
 

1. List
        An ordered, mutable collection of elements. Can have duplicates 

 list = [1, 2, 3, 4, 1]

============================
2 Tuple
     An ordered, immutable collection of elements.Can have duplicates 

  tuple = (1, 2, 3, 4, 5,1 )
           
    Immutable: Once created, elements cannot be changed, added, or removed.
	
===========
3. Set
          An unordered, mutable collection of unique elements., NO DUPLICATES 
 set = {1, 2, 3, 4}

=============
4. Dictionary

        An unordered, mutable collection of key-value pairs.
		
   dict = {'NAME': 'MADHUKIRAN',
          'MOBILE': '7396627149'
		   'ADDRESS'  'MADHUKIRAN'
		 
		  
		  }


---------------------------------------

I have a list of user names. I need to remove duplicates and store them efficiently



  usernames = ["madhu", "kiran", "gorekar", "madhu", "xyz"]
  
  
  
          unique_usernames = list(set(usernames))
     
====================================================================
  
I'm building a contact book. I need to store names, phone numbers, and email addresses


contact = {
    "name": "Madhu",
    "phone": "7396627149",
    "email": "devopstraininghub@gmail.com"
   }
  

contact_book = [
    {"name": "Madhu", "phone": "7396627149", "email": "devopstraininghub@gmail.com"},
     {"name": "xyz", "phone": "7396627149",  "email": "xyz@gmail.com"},
]


==================================================

Real-Time DevOps Examples 

List:

Server IPs: 
       A list of IP addresses of servers in a Cluster, which may change as servers are added or removed.

   - Server IPs: ['192.168.1.1', '192.168.1.2', '10.81.0.3'] 

   
==============================


Tuple:

Server Configuration: 
          A tuple containing fixed information about a server (IP, OS, version). Once set, these details should not change.
		  
          Immutable System Settings: Information about the region, availability zone, and instance type, which remains constant for the duration of a deployment.
		  
   - Server Configuration: ('192.168.1.1', 'Ubuntu', '18.04') 
   - Immutable System Settings: ('US-East', 'us-east-1a', 'm5.large')		  
		  
====================
	  
Set:

    Active Services --- A set of active services running on a server, where uniqueness (no duplicates) is crucial.
	
    Unique Error Codes ---A set of unique error codes encountered during operations, useful for monitoring and alerting.

	- Active Services: {'nginx', 'redis', 'mysql', 'jenkins'} 
	- Unique Error Codes: {404, 500, 502}
	
=====================

Dictionaries :	
	
    Environment Variables: Key-value pairs representing environment variables for an application, where keys are unique and values can vary.
	
    Configurations: Dictionary of configurations, such as timeout settings and retry limits, where keys represent the setting and values are the parameters

    - Environment Variables: {'DB_HOST': 'db.example.com', 
	                           'DB_USER': 'admin'
							   
							   } 
	
    - Configurations: {
	                   'timeout': 30, 
					   'retries': 3
					   }
	


========================================================


	FUNCTIONS 
          -- BLOCK OF CODE FOR REPEATED USE 
		  -- ALLOWS TO GROUP A SET OF COMMANDS INTO A SINGLE, REUSABLE UNIT. 
		  -- BREAK DOWN TOTAL FUNCTIONALITY OF SCRIPT INTO LOGICAL SUB-SECTIONS 
          -- ENCAPSULATE AND REUSE CODE
		  -- WE CAN CALL FUNCTIONS WHEN EVER NEEDED
		  -- MAKE YOUR SCRIPTS MORE ORGANIZED, MODULAR, AND EASIER TO MAINTAIN.
		  
	

============================================================

FUNCTIONS IN PYTHON: 

# Python example

def greet(name):
    print(f"Hello, {name}!")

greet("Madhu")	

====================================================================


FUNCTIONS IN SHELL : 
# Bash example

greet() {
  echo "Hello, $1!"
}

greet "Madhu"

	
===============================================


1. PYTHON INSTALLATION - Windows 
                       - Linux 
					   - vscode
					   - github codespaces 


-m trace --trace

python -m trace --trace add_numbers.py 

=======================================


---------------------
PYTHON:

def function_name(parameters):
        # Commands to be executed
    return value

-------

SHELL :

function_name() {
        # Commands to be executed
}


========================================================

def greet():
    print ("hello , madhu")


greet()
greet(madhu)

=============================
def greet(name):
    print(f"hello, {name}")

greet("madhu")
greet("kiran")
greet("123")
=============================

def add_numbers(num1,num2):

    sum = num1 + num2
    return sum

result = add_numbers(3.2,4.1)

print(f"output is : {result}")


=============================


def add_numbers(a,b):

    sum = a + b
    return sum


num1 = float(input("Enter the 1st number:"))
num2 = float(input("Enter the 2nd number:"))

result = add_numbers(num1,num2)

print(f"output is : {result}")

=============================

FEW IMP/METHODS ON DATA TYPES :



==========================================================================================
LIST DATATYPE: 

mc_list = [1,2,3,4,4,1,9,3,1]

my_list.append(4)
print("After append:", my_list)


my_list.extend([8, 9, 7])
print("After extend:", my_list)


my_list.insert(0, 10)
print("After insert:", my_list)

# Removing the first occurrence of an element
my_list.remove(1)
print("After remove:", my_list)

# Popping an element (removing and returning it)
popped_element = my_list.pop()
print("Popped element:", popped_element)
print("After pop:", my_list)

# Getting the index of an element
index_of_9 = my_list.index(9)
print("Index of 9:", index_of_9)

# Counting the occurrences of an element
count_of_1 = my_list.count(1)
print("Count of 1:", count_of_1)

# Sorting the list
my_list.sort()
print("After sort:", my_list)

# Reversing the list
my_list.reverse()
print("After reverse:", my_list)

# Copying the list
copied_list = my_list.copy()
print("Copied list:", copied_list)

# Clearing the list
my_list.clear()
print("After clear:", my_list)

# List properties and functions
print("Length of  list:", len(my_list))
print("Length of copied list:", len(copied_list))
print("Maximum element:", max(copied_list))
print("Minimum element:", min(copied_list))
print("Sum of elements:", sum(copied_list))

  
============================================================================================
  
TUPLE :

Immutability: Tuples cannot be modified once created. Methods like append(), remove(), pop(), etc., are not available.


my_tuple = (3, 1, 4, 1, 5, 9, 2, 6, 5)

# Counting the occurrences of an element
count_of_1 = my_tuple.count(1)
print("Count of 1:", count_of_1)

# Getting the index of an element
index_of_9 = my_tuple.index(9)
print("Index of 9:", index_of_9)

# Getting the length of the tuple
length_of_tuple = len(my_tuple)
print("Length of tuple:", length_of_tuple)

# Finding the maximum element
max_element = max(my_tuple)
print("Maximum element:", max_element)

# Finding the minimum element
min_element = min(my_tuple)
print("Minimum element:", min_element)

# Calculating the sum of elements
sum_of_elements = sum(my_tuple)
print("Sum of elements:", sum_of_elements)

# Getting a sorted list from the tuple
sorted_list = sorted(my_tuple)
print("Sorted tuple as list:", sorted_list)

sorted_list.append(4)
print("After append:", sorted_list)

===============================================================================================
